# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyrnnlm', [dirname(__file__)])
        except ImportError:
            import _pyrnnlm
            return _pyrnnlm
        if fp is not None:
            try:
                _mod = imp.load_module('_pyrnnlm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyrnnlm = swig_import_helper()
    del swig_import_helper
else:
    import _pyrnnlm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAX_STRING = _pyrnnlm.MAX_STRING
class neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ac"] = _pyrnnlm.neuron_ac_set
    __swig_getmethods__["ac"] = _pyrnnlm.neuron_ac_get
    if _newclass:ac = _swig_property(_pyrnnlm.neuron_ac_get, _pyrnnlm.neuron_ac_set)
    __swig_setmethods__["er"] = _pyrnnlm.neuron_er_set
    __swig_getmethods__["er"] = _pyrnnlm.neuron_er_get
    if _newclass:er = _swig_property(_pyrnnlm.neuron_er_get, _pyrnnlm.neuron_er_set)
    def __init__(self): 
        this = _pyrnnlm.new_neuron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrnnlm.delete_neuron
    __del__ = lambda self : None;
neuron_swigregister = _pyrnnlm.neuron_swigregister
neuron_swigregister(neuron)

class synapse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synapse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synapse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _pyrnnlm.synapse_weight_set
    __swig_getmethods__["weight"] = _pyrnnlm.synapse_weight_get
    if _newclass:weight = _swig_property(_pyrnnlm.synapse_weight_get, _pyrnnlm.synapse_weight_set)
    def __init__(self): 
        this = _pyrnnlm.new_synapse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrnnlm.delete_synapse
    __del__ = lambda self : None;
synapse_swigregister = _pyrnnlm.synapse_swigregister
synapse_swigregister(synapse)

class vocab_word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vocab_word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vocab_word, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cn"] = _pyrnnlm.vocab_word_cn_set
    __swig_getmethods__["cn"] = _pyrnnlm.vocab_word_cn_get
    if _newclass:cn = _swig_property(_pyrnnlm.vocab_word_cn_get, _pyrnnlm.vocab_word_cn_set)
    __swig_setmethods__["word"] = _pyrnnlm.vocab_word_word_set
    __swig_getmethods__["word"] = _pyrnnlm.vocab_word_word_get
    if _newclass:word = _swig_property(_pyrnnlm.vocab_word_word_get, _pyrnnlm.vocab_word_word_set)
    __swig_setmethods__["prob"] = _pyrnnlm.vocab_word_prob_set
    __swig_getmethods__["prob"] = _pyrnnlm.vocab_word_prob_get
    if _newclass:prob = _swig_property(_pyrnnlm.vocab_word_prob_get, _pyrnnlm.vocab_word_prob_set)
    __swig_setmethods__["class_index"] = _pyrnnlm.vocab_word_class_index_set
    __swig_getmethods__["class_index"] = _pyrnnlm.vocab_word_class_index_get
    if _newclass:class_index = _swig_property(_pyrnnlm.vocab_word_class_index_get, _pyrnnlm.vocab_word_class_index_set)
    def __init__(self): 
        this = _pyrnnlm.new_vocab_word()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrnnlm.delete_vocab_word
    __del__ = lambda self : None;
vocab_word_swigregister = _pyrnnlm.vocab_word_swigregister
vocab_word_swigregister(vocab_word)

TEXT = _pyrnnlm.TEXT
BINARY = _pyrnnlm.BINARY
COMPRESSED = _pyrnnlm.COMPRESSED
class CRnnLM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRnnLM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRnnLM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha_set"] = _pyrnnlm.CRnnLM_alpha_set_set
    __swig_getmethods__["alpha_set"] = _pyrnnlm.CRnnLM_alpha_set_get
    if _newclass:alpha_set = _swig_property(_pyrnnlm.CRnnLM_alpha_set_get, _pyrnnlm.CRnnLM_alpha_set_set)
    __swig_setmethods__["train_file_set"] = _pyrnnlm.CRnnLM_train_file_set_set
    __swig_getmethods__["train_file_set"] = _pyrnnlm.CRnnLM_train_file_set_get
    if _newclass:train_file_set = _swig_property(_pyrnnlm.CRnnLM_train_file_set_get, _pyrnnlm.CRnnLM_train_file_set_set)
    def __init__(self): 
        this = _pyrnnlm.new_CRnnLM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrnnlm.delete_CRnnLM
    __del__ = lambda self : None;
    def random(self, *args): return _pyrnnlm.CRnnLM_random(self, *args)
    def setTrainFile(self, *args): return _pyrnnlm.CRnnLM_setTrainFile(self, *args)
    def setValidFile(self, *args): return _pyrnnlm.CRnnLM_setValidFile(self, *args)
    def setTestFile(self, *args): return _pyrnnlm.CRnnLM_setTestFile(self, *args)
    def setRnnLMFile(self, *args): return _pyrnnlm.CRnnLM_setRnnLMFile(self, *args)
    def setLMProbFile(self, *args): return _pyrnnlm.CRnnLM_setLMProbFile(self, *args)
    def setFileType(self, *args): return _pyrnnlm.CRnnLM_setFileType(self, *args)
    def setClassSize(self, *args): return _pyrnnlm.CRnnLM_setClassSize(self, *args)
    def setOldClasses(self, *args): return _pyrnnlm.CRnnLM_setOldClasses(self, *args)
    def setLambda(self, *args): return _pyrnnlm.CRnnLM_setLambda(self, *args)
    def setGradientCutoff(self, *args): return _pyrnnlm.CRnnLM_setGradientCutoff(self, *args)
    def setDynamic(self, *args): return _pyrnnlm.CRnnLM_setDynamic(self, *args)
    def setGen(self, *args): return _pyrnnlm.CRnnLM_setGen(self, *args)
    def setIndependent(self, *args): return _pyrnnlm.CRnnLM_setIndependent(self, *args)
    def setLearningRate(self, *args): return _pyrnnlm.CRnnLM_setLearningRate(self, *args)
    def setRegularization(self, *args): return _pyrnnlm.CRnnLM_setRegularization(self, *args)
    def setMinImprovement(self, *args): return _pyrnnlm.CRnnLM_setMinImprovement(self, *args)
    def setHiddenLayerSize(self, *args): return _pyrnnlm.CRnnLM_setHiddenLayerSize(self, *args)
    def setCompressionLayerSize(self, *args): return _pyrnnlm.CRnnLM_setCompressionLayerSize(self, *args)
    def setDirectSize(self, *args): return _pyrnnlm.CRnnLM_setDirectSize(self, *args)
    def setDirectOrder(self, *args): return _pyrnnlm.CRnnLM_setDirectOrder(self, *args)
    def setBPTT(self, *args): return _pyrnnlm.CRnnLM_setBPTT(self, *args)
    def setBPTTBlock(self, *args): return _pyrnnlm.CRnnLM_setBPTTBlock(self, *args)
    def setRandSeed(self, *args): return _pyrnnlm.CRnnLM_setRandSeed(self, *args)
    def setDebugMode(self, *args): return _pyrnnlm.CRnnLM_setDebugMode(self, *args)
    def setAntiKasparek(self, *args): return _pyrnnlm.CRnnLM_setAntiKasparek(self, *args)
    def setOneIter(self, *args): return _pyrnnlm.CRnnLM_setOneIter(self, *args)
    def setMaxIter(self, *args): return _pyrnnlm.CRnnLM_setMaxIter(self, *args)
    def getWordHash(self, *args): return _pyrnnlm.CRnnLM_getWordHash(self, *args)
    def readWord(self, *args): return _pyrnnlm.CRnnLM_readWord(self, *args)
    def searchVocab(self, *args): return _pyrnnlm.CRnnLM_searchVocab(self, *args)
    def readWordIndex(self, *args): return _pyrnnlm.CRnnLM_readWordIndex(self, *args)
    def addWordToVocab(self, *args): return _pyrnnlm.CRnnLM_addWordToVocab(self, *args)
    def learnVocabFromTrainFile(self): return _pyrnnlm.CRnnLM_learnVocabFromTrainFile(self)
    def saveWeights(self): return _pyrnnlm.CRnnLM_saveWeights(self)
    def restoreWeights(self): return _pyrnnlm.CRnnLM_restoreWeights(self)
    def saveContext(self): return _pyrnnlm.CRnnLM_saveContext(self)
    def restoreContext(self): return _pyrnnlm.CRnnLM_restoreContext(self)
    def saveContext2(self): return _pyrnnlm.CRnnLM_saveContext2(self)
    def restoreContext2(self): return _pyrnnlm.CRnnLM_restoreContext2(self)
    def initNet(self): return _pyrnnlm.CRnnLM_initNet(self)
    def saveNet(self): return _pyrnnlm.CRnnLM_saveNet(self)
    def goToDelimiter(self, *args): return _pyrnnlm.CRnnLM_goToDelimiter(self, *args)
    def restoreNet(self): return _pyrnnlm.CRnnLM_restoreNet(self)
    def netFlush(self): return _pyrnnlm.CRnnLM_netFlush(self)
    def netReset(self): return _pyrnnlm.CRnnLM_netReset(self)
    def computeNet(self, *args): return _pyrnnlm.CRnnLM_computeNet(self, *args)
    def learnNet(self, *args): return _pyrnnlm.CRnnLM_learnNet(self, *args)
    def copyHiddenLayerToInput(self): return _pyrnnlm.CRnnLM_copyHiddenLayerToInput(self)
    def trainNet(self): return _pyrnnlm.CRnnLM_trainNet(self)
    def useLMProb(self, *args): return _pyrnnlm.CRnnLM_useLMProb(self, *args)
    def testNet(self): return _pyrnnlm.CRnnLM_testNet(self)
    def testNbest(self): return _pyrnnlm.CRnnLM_testNbest(self)
    def testGen(self): return _pyrnnlm.CRnnLM_testGen(self)
    def matrixXvector(self, *args): return _pyrnnlm.CRnnLM_matrixXvector(self, *args)
CRnnLM_swigregister = _pyrnnlm.CRnnLM_swigregister
CRnnLM_swigregister(CRnnLM)
cvar = _pyrnnlm.cvar
PRIMES = cvar.PRIMES
PRIMES_SIZE = cvar.PRIMES_SIZE
MAX_NGRAM_ORDER = cvar.MAX_NGRAM_ORDER

layer_input = _pyrnnlm.layer_input
layer_hiden = _pyrnnlm.layer_hiden
layer_hidenc = _pyrnnlm.layer_hidenc
layer_output = _pyrnnlm.layer_output
class EasyCRnnLM(CRnnLM):
    __swig_setmethods__ = {}
    for _s in [CRnnLM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EasyCRnnLM, name, value)
    __swig_getmethods__ = {}
    for _s in [CRnnLM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EasyCRnnLM, name)
    __repr__ = _swig_repr
    def getNeuValue(self, *args): return _pyrnnlm.EasyCRnnLM_getNeuValue(self, *args)
    def getWordsNumInClass(self, *args): return _pyrnnlm.EasyCRnnLM_getWordsNumInClass(self, *args)
    def getWord(self, *args): return _pyrnnlm.EasyCRnnLM_getWord(self, *args)
    def getVocabSize(self): return _pyrnnlm.EasyCRnnLM_getVocabSize(self)
    def getWordInClass(self, *args): return _pyrnnlm.EasyCRnnLM_getWordInClass(self, *args)
    def getNextWord(self, *args): return _pyrnnlm.EasyCRnnLM_getNextWord(self, *args)
    def calSentScore(self, *args): return _pyrnnlm.EasyCRnnLM_calSentScore(self, *args)
    def __init__(self): 
        this = _pyrnnlm.new_EasyCRnnLM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrnnlm.delete_EasyCRnnLM
    __del__ = lambda self : None;
EasyCRnnLM_swigregister = _pyrnnlm.EasyCRnnLM_swigregister
EasyCRnnLM_swigregister(EasyCRnnLM)

# This file is compatible with both classic and new-style classes.


